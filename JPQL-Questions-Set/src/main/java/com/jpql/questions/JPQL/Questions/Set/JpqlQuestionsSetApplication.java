package com.jpql.questions.JPQL.Questions.Set;

import com.jpql.questions.JPQL.Questions.Set.entities.Book;
import com.jpql.questions.JPQL.Questions.Set.entities.Library;
import com.jpql.questions.JPQL.Questions.Set.entities.Member;
import jakarta.persistence.EntityManager;
import jakarta.persistence.TypedQuery;
import org.hibernate.Session;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

import java.util.List;
import java.util.Objects;

@SpringBootApplication
public class JpqlQuestionsSetApplication {

	public static void main(String[] args) {
		SpringApplication.run(JpqlQuestionsSetApplication.class, args);
	}

	@Bean
	public CommandLineRunner commandLineRunner(EntityManager entityManager) {
		return runner -> {

			/*
			1. List all books borrowed by a specific member.
			* */

//			String jpql = "SELECT b \n" +
//					"FROM Book b \n" +
//					"JOIN b.borrowTransactions bt \n" +
//					"JOIN FETCH b.library \n" +
//					"WHERE bt.member.id = :memberId\n";    //Only 1 query generated by hibernate if we use fetch = FetchType.LAZY on library field in Book
			                                               // Otherwise we got 2 queries.
//			TypedQuery<Book> query = entityManager.createQuery(jpql, Book.class);
//			query.setParameter("memberId", 2);
//			List<Book> books = query.getResultList();
//			System.out.println("Total Books = " + books.size());

			/* *************************************************************************************************/


			/*
			2. Find libraries with the most borrowed books.
			* */


//			String jpql2 = "SELECT l.name, COUNT(bt.id) AS borrowCount \n" +
//					"FROM Library l \n" +
//					"JOIN l.members m \n" +
//					"JOIN m.borrowTransactions bt \n" +
//					"GROUP BY l.name \n" +
//					"ORDER BY borrowCount DESC\n";
//			TypedQuery<Object[]> query2 = entityManager.createQuery(jpql2, Object[].class);
//			List<Object[]> resultList = query2.getResultList();
//
//			for (Object[] result : resultList) {
//				String libraryName = (String) result[0];  // First element is library name
//				Long borrowCount = (Long) result[1];      // Second element is borrow count
//				System.out.println("Library Name: " + libraryName + ", Borrow Count: " + borrowCount);
//			}


//			String jpql2 = """
//                    SELECT l\s
//                    FROM Library l\s
//                    JOIN l.members m\s
//                    """;
//			TypedQuery<Library> query2 = entityManager.createQuery(jpql2, Library.class);
//			List<Library> libraries = query2.getResultList();
//
//			for (Library library : libraries) {
//				System.out.println(library);
//			}

			String jpqlWithObjectType = """
                    SELECT l\s
                    FROM Library l
                    JOIN Member m
                    ON m.library.id = l.id\s
                    """;
			TypedQuery<Object[]> query1 = entityManager.createQuery(jpqlWithObjectType, Object[].class);
			List<Object[]> libraries1 = query1.getResultList();
			System.out.println(libraries1.size());

			String jpqlWithLibraryType = """
                    SELECT l\s
                    FROM Library l
                    JOIN Member m
                    ON m.library.id = l.id\s
                    """;
			TypedQuery<Library> query2 = entityManager.createQuery(jpqlWithLibraryType, Library.class);
			List<Library> libraries2 = query2.getResultList();
			System.out.println(libraries2.size());

//			for (Library member : members) {
//				System.out.println(member);
//			}

//			Session session = entityManager.unwrap(Session.class);
//
//// Check if the object is in the first-level cache
//			Member member = session.get(Member.class, 2);
//
//			if (session.contains(member)) {
//				System.out.println("The member object is in the first-level cache.");
//			} else {
//				System.out.println("The member object was not in the first-level cache.");
//			}


			/*
			3. Get all members who have borrowed books from a specific genre.
			* */


//			String jpql = "SELECT DISTINCT m " +
//					"FROM Member m " +
//					"JOIN m.borrowTransactions bt " +
//					"JOIN bt.book b " +
//					"WHERE b.genre = :genre";
//
//			TypedQuery<Member> query = entityManager.createQuery(jpql, Member.class);
//			query.setParameter("genre", "Fiction");  // Example genre
//			List<Member> members = query.getResultList();
//
//			for (Member member : members) {
//				System.out.println("Member: " + member.getFirstName() + " " + member.getLastName());
//			}


		};
	}

}
